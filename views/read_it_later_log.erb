<link rel="stylesheet" href="/css/markdown.css">
<%
	f = File.open(Dir.pwd + "/data/bookmarks.log", "r").read
    
	bookmarks = {}
    db = SQLite3::Database.open(Dir.pwd + "/data/bookmarks.db")
    db.execute("SELECT * FROM bookmarks ORDER BY watched_time DESC") do |row|
    	bookmarks[row[0]] = {
      							:url => row[1],
      							:watched_time => row[2][0..-7],
      							:title => row[3],
      							:starred => (row[4] == 'true'),
      							:note => row[5]
      						}
    end
    db.close
	
	log = []
	h = Hash.new(0)
	
	table_log = <<TAB
visited time | url
-------------|-----
TAB

	f.scan(/^\[(.+?)\]\s(.+)$/).each do |m|
		log << {
			   	  visited_time: m[0],
			   	  url: m[1]
			   }
		h[m[1]] += 1
		table_log += "#{m[0]} | #{m[1]}\n"
	end
	
	table_frq = <<TAB
title | url | ❤️ | count
------|-----|----|------
TAB
	h.sort_by{ |k, v| v }.reverse_each do |url, count|
		case url
		when /\/s\?q=(.+)/
			table_frq += "search: #{$1} | /s | - | #{count}\n"
		when /\/search\?word=(.+)/
			table_frq += "search: #{$1} | /search | - | #{count}\n"
		else
			sel = bookmarks.select { |k, v| url == v[:url] }
			if sel.empty?
				table_frq += "- | #{url} | - | #{count}\n"
			else
				bm = sel.values.first
				title = bm[:title].gsub('|', '--')
				fav = bm[:starred]
				table_frq += "#{title} | #{url} | #{fav} | #{count}\n"
			end
		end
		
		# %><%= bm %><br /><%
		
	end
	
	t = <<TAB
url | protocal | host | port | path | suffix | anchor | params
----|----------|------|------|------|--------|--------|--------
TAB
	websites = Hash.new(0)
	bookmarks.each do |k, v|
# 		m = v[:url].match(/
# 							(?<protocol>http(s)?)
# 							:\/\/
# 							(?<host>[\w-.]+)
# 							(:(?<port>\d{4}))?
# 							(?<path>(\/[\w-]+)*\/?)
# 							(\.(?<suffix>\w+))?
# 							(\#(?<anchor>[\w-]+))?
# 							(\?
# 							  (?<params>
# 							    (
# 							      (\w+=\w+)
# 							      (&(\w+=\w+))*
# 							    )
# 							  )
# 							)?
# 						  /x)
# 		t +=  "#{v[:url]} | #{m[:protocol]} | #{m[:host]} | #{m[:port]} | #{m[:path]} | #{m[:suffix]} | #{m[:anchor]} | #{m[:params]}\n"
# 		websites["#{m[:protocol]}://#{m[:host]}"] += 1
		case v[:url]
		when /https?:\/\/([\w.-]+)/
			websites[$1] += 1
		else
			websites["ERROR: #{v[:url]}"] += 1
		end
	end
#	%><%= Kramdown::Document.new(t).to_html %><%
	
	table_web = <<TAB
title | count
------|-------
TAB
	websites.sort_by{ |k, v| v }.reverse_each do |website, c|
		table_web += "[#{website}](#{website}) | #{c}\n"
	end
	
	md = <<MD
# 書籤價值計算公式

- 加「書籤的訪問次數」；
- 如❤️，`+3`；
- 加上「根網站[^root]的蒐藏次數」；
- （借助飯否上的數據進一步提供支撐）
- （暫時就想到這麼多😓）

[^root]: 問題在於「如何判斷根網站」。因為如果是託管類網站，根網站並非博主本身（比如：`weibo.com`）。

# TODO

- 在搜索書籤時按照「書籤價值」排序；
- 統計分析蒐藏書籤的主題詞；
- 分析各時段的關注點；
- 對書籤的主網站評價（比如：某個高質量的博主）；


# 訪問記錄

#{table_log}


# 訪問頁面統計

#{table_frq}


# 訪問網站統計

#{table_web}
MD

%>

<%= Kramdown::Document.new(md).to_html %>